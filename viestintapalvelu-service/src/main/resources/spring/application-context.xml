<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jaxrs-client="http://cxf.apache.org/jaxrs-client"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
           http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
           http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
           http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
           http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
           http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <beans profile="aws">
        <bean id="downloadCache" class="fi.vm.sade.viestintapalvelu.download.cache.DownloadCacheS3"/>
    </beans>

    <beans profile="default">
        <bean id="downloadCache" class="fi.vm.sade.viestintapalvelu.download.cache.DownloadCacheLocal"/>
    </beans>

    <beans profile="default, aws">
        <context:annotation-config />
        <context:component-scan base-package="fi.vm.sade.viestintapalvelu"/>
        <context:property-placeholder
                location="file:///${user.home:''}/oph-configuration/common.properties, file:///${user.home:''}/oph-configuration/viestintapalvelu.properties"
                ignore-resource-not-found="true" properties-ref="defaultProps" ignore-unresolvable="false"/>

        <bean id="defaultProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="properties">
                <util:properties local-override="true">
                    <prop key="cas_mode">front</prop>
                    <prop key="cas_key">viestintapalvelu</prop>
                    <prop key="cas_service">${cas.service.viestintapalvelu}</prop>
                    <prop key="cas_callback_url">${cas.callback.viestintapalvelu}</prop>
                    <prop key="spring_security_default_access">permitAll</prop> <!-- permitAll because trusted resources wont work otherwise -->
                </util:properties>
            </property>
        </bean>
        <import resource="file:///${user.home:''}/oph-configuration/security-context-backend.xml"/>
        <!-- Flyway definitions for creating the database -->

        <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
            <property name="poolName" value="viestintaHikariCP" />
            <property name="connectionTestQuery" value="SELECT 1" />
            <property name="dataSourceClassName" value="org.postgresql.ds.PGSimpleDataSource" />
            <property name="maximumPoolSize" value="${viestintapalvelu-service.postgresql.maxactive}" />
            <property name="connectionTimeout" value="${viestintapalvelu-service.postgresql.maxwait}" />
            <property name="maxLifetime" value="${viestintapalvelu-service.postgresql.maxlifetimemillis}"/>
            <property name="registerMbeans" value="true" />

            <property name="dataSourceProperties">
                <props>
                    <prop key="url">${viestintapalvelu-service.postgresql.url}</prop>
                    <prop key="user">${viestintapalvelu-service.postgresql.user}</prop>
                    <prop key="password">${viestintapalvelu-service.postgresql.password}</prop>
                </props>
            </property>
        </bean>

        <!-- HikariCP configuration -->
        <bean id="dbDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
            <constructor-arg ref="hikariConfig" />
        </bean>

        <bean id="flyway" class="com.googlecode.flyway.core.Flyway" init-method="migrate">
            <property name="initOnMigrate" value="${flyway.initOnMigrate}"/>
            <property name="schemas" value="kirjeet" />
            <property name="dataSource" ref="dbDataSource" />
        </bean>
    </beans>

    <beans profile="dev">
        <context:property-placeholder
                location="classpath:viestintapalvelu.properties, file:///${user.home:''}/oph-configuration/common.properties, file:///${user.home:''}/oph-configuration/viestintapalvelu.properties, file:///${user.home:''}/oph-configuration/override.properties"
                ignore-resource-not-found="true" properties-ref="devProps"/>
        <bean id="devProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean"/>

        <bean id="dbDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="org.postgresql.Driver"/>
            <property name="url" value="jdbc:postgresql://postgresdev:5432/viestinta"/>
            <property name="username" value="postgres"/>
            <property name="password" value="postgres"/>
        </bean>
        <bean id="flyway" class="com.googlecode.flyway.core.Flyway" init-method="migrate">
            <property name="initOnMigrate" value="false"/>
            <property name="schemas" value="kirjeet" />
            <property name="dataSource" ref="dbDataSource" />
        </bean>
    </beans>

    <beans>
        <import resource="classpath:META-INF/cxf/cxf.xml" />
        <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

        <util:map id="poolSizes" key-type="java.lang.String" value-type="java.lang.String">
            <entry key="batchJobs" value="${viestintapalvelu.letter.batch.jobs.pool.size}"/>
            <entry key="threadsPerBatchJob" value="${viestintapalvelu.letter.batch.job.thread.count}"/>
            <entry key="reveiverJobs" value="${viestintapalvelu.letter.batch.receiver.job.pool.size}"/>
            <entry key="otherAsync" value="${viestintapalvelu.other.async.resource.jobs.pool.size}"/>
            <entry key="recoveryJobs" value="${viestintapalvelu.recovery.handler.jobs.pool.size}"/>
        </util:map>
        <import resource="classpath:spring/executors-config.xml"/>

        <context:annotation-config />
        <context:component-scan base-package="fi.vm.sade.viestintapalvelu"/>


        <util:map id="optionsCacheConfig" key-type="java.lang.String" value-type="java.lang.Long">
            <entry key="timeoutMillis" value="${viestintapalvelu.options.cache.valid.millis}"/>
        </util:map>

        <bean id="sessionCache" class="fi.vm.sade.authentication.cas.CasFriendlyCache"/>

        <bean id="ophRequestHeaders" class="fi.vm.sade.javautils.cxf.OphRequestHeadersCxfInterceptor">
            <property name="clientSubSystemCode" value="viestintapalvelu.ryhmasahkoposti-service.backend"/>
        </bean>

        <jaxrs-client:client id="dokumenttipalveluRestClient" serviceClass="fi.vm.sade.valinta.dokumenttipalvelu.resource.DokumenttiResource"
                             address="${dokumenttipalvelu-service.rest.url}" inheritHeaders="true">
            <jaxrs-client:outInterceptors>
                <ref bean="ophRequestHeaders"/>
            </jaxrs-client:outInterceptors>
            <jaxrs-client:providers>
                <ref bean="customJsonProvider"/>
            </jaxrs-client:providers>
        </jaxrs-client:client>

        <jaxrs-client:client id="organisaatioResourceClient" serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.OrganisaatioResource" address="${organisaatio-service.rest.url}" inheritHeaders="true">
            <jaxrs-client:outInterceptors>
                <ref bean="ophRequestHeaders"/>
            </jaxrs-client:outInterceptors>
            <jaxrs-client:providers>
                <ref bean="customJsonProvider"/>
            </jaxrs-client:providers>
        </jaxrs-client:client>

        <jaxrs-client:client id="organisaatioResourceWithoutAuthenticationClient" serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.OrganisaatioResourceWithoutAuthentication"
                             address="${organisaatio-service.rest.url}" inheritHeaders="true">
            <jaxrs-client:outInterceptors>
                <ref bean="ophRequestHeaders"/>
            </jaxrs-client:outInterceptors>
            <jaxrs-client:providers>
                <ref bean="customJsonProvider"/>
            </jaxrs-client:providers>
        </jaxrs-client:client>


        <!-- Oppijanumerorekisteri -->
        <bean id="oppijanumeroRekisteriRestClient" class="fi.vm.sade.externalinterface.OppijanumeroRekisteriRestClient">
            <constructor-arg value="${oppijanumerorekisteri-service.base}"/>
            <property name="webCasUrl" value="${web.url.cas}"/>
            <property name="casService" value="${oppijanumerorekisteri-service.base}/j_spring_cas_security_check"/>
            <property name="username" value="${ryhmasahkoposti.app.username.to.viestintapalvelu}" />
            <property name="password" value="${ryhmasahkoposti.app.password.to.viestintapalvelu}" />
        </bean>


        <bean id="kayttooikeusRestClient" class="fi.vm.sade.externalinterface.KayttooikeusRestClient">
            <constructor-arg value="${kayttooikeus-service.base}"/>
            <property name="webCasUrl" value="${web.url.cas}"/>
            <property name="casService" value="${kayttooikeus-service.base}/j_spring_cas_security_check"/>
            <property name="username" value="${ryhmasahkoposti.app.username.to.viestintapalvelu}" />
            <property name="password" value="${ryhmasahkoposti.app.password.to.viestintapalvelu}" />
        </bean>

        <bean id="ryhmasahkopostiRestClient" class="fi.vm.sade.viestintapalvelu.externalinterface.RyhmasahkopostiRestClient">
            <constructor-arg index="0" value="${ryhmasahkoposti.base}"/>
            <constructor-arg index="1">
                <bean class="fi.vm.sade.externalinterface.common.ObjectMapperProvider"/>
            </constructor-arg>
            <property name="webCasUrl" value="${web.url.cas}"/>
            <property name="casService" value="${ryhmasahkoposti.base}"/>
            <property name="username" value="${ryhmasahkoposti.app.username.to.viestintapalvelu}" />
            <property name="password" value="${ryhmasahkoposti.app.password.to.viestintapalvelu}" />
        </bean>

        <jaxrs-client:client id="tarjontaHakuResourceClient"
                        serviceClass="fi.vm.sade.viestintapalvelu.externalinterface.api.TarjontaHakuResource"
                        address="${tarjonta-service.rest.url}" inheritHeaders="true">
          <jaxrs-client:outInterceptors>
              <ref bean="ophRequestHeaders"/>
            </jaxrs-client:outInterceptors>
            <jaxrs-client:providers>
                <ref bean="customJsonProvider"/>
            </jaxrs-client:providers>
        </jaxrs-client:client>

        <jaxws:client id="asiointitiliViranomaispalvelutClient" serviceClass="fi.suomi.asiointitili.Viranomaispalvelut"
                address="${viestintapalvelu.asiointitili.service.location}"
                wsdlLocation="/via/wsdl/viranomaispalvelut.wsdl">
            <jaxws:inInterceptors>
                <bean id="asiointitiliViranomaispalvelutLoggingInInterceptor"
                            class="fi.vm.sade.viestintapalvelu.util.ws.CustomLoggingInInterceptor" >
                    <property name="prettyLogging" value="true" />
                    <property name="enabled" value="${viestintapalvelu.asiointitili.ws.log.responses}"/>
                </bean>
            </jaxws:inInterceptors>
            <jaxws:outInterceptors>
                <bean id="soapSigningInterceptor" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
                    <constructor-arg>
                        <map>
                            <entry key="action" value="Timestamp Signature"/>
                            <entry key="signaturePropRefId" value="xmlSignatureProperties"/>
                            <entry key="user" value="${viestintapalvelu.asiointitili.wss.keystore.alias}"/>
                            <entry key="signatureParts" value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                            <entry key="signatureUser" value="${viestintapalvelu.asiointitili.wss.keystore.alias}"/>
                            <entry key="xmlSignatureProperties" value-ref="asiointitiliViranomaispalvelutCrytoProperties"/>
                            <entry key="passwordCallbackRef" value-ref="privateKeyPasswordHandler"/>
                            <entry key="signatureKeyIdentifier" value="DirectReference"/>
                        </map>
                    </constructor-arg>
                </bean>
                <bean id="asiointitiliViranomaispalvelutLoggingOutInterceptor"
                      class="fi.vm.sade.viestintapalvelu.util.ws.CustomLoggingOutInterceptor" >
                    <property name="prettyLogging" value="true" />
                    <property name="enabled" value="${viestintapalvelu.asiointitili.ws.log.requests}"/>
                </bean>
            </jaxws:outInterceptors>
        </jaxws:client>
        <util:properties id="asiointitiliViranomaispalvelutCrytoProperties">
            <prop key="org.apache.ws.security.crypto.provider">org.apache.ws.security.components.crypto.Merlin</prop>
            <prop key="org.apache.ws.security.crypto.merlin.keystore.type">${viestintapalvelu.asiointitili.wss.keystore.instance}</prop>
            <prop key="org.apache.ws.security.crypto.merlin.keystore.file">${viestintapalvelu.asiointitili.wss.keystore.file}</prop>
            <prop key="org.apache.ws.security.crypto.merlin.keystore.password">${viestintapalvelu.asiointitili.wss.keystore.password}</prop>
            <prop key="org.apache.ws.security.crypto.merlin.keystore.alias">${viestintapalvelu.asiointitili.wss.keystore.alias}</prop>
        </util:properties>
        <bean id="privateKeyPasswordHandler" class="fi.vm.sade.viestintapalvelu.util.ws.PrivateKeyPasswordCallbackHandler">
            <property name="privateKeyPassword" value="${viestintapalvelu.asiointitili.wss.certificate.password}"/>
        </bean>
        <util:map id="securityParams" key-type="java.lang.String" value-type="java.lang.String">
            <entry key="authMode" value="${auth.mode}"/>
        </util:map>
        <http:conduit id="asiointitiliViranomaispalvelutConduit" name="*.http-conduit">
            <http:tlsClientParameters>
                <sec:keyManagers keyPassword="${viestintapalvelu.asiointitili.wss.keystore.password}">
                    <sec:keyStore file="${viestintapalvelu.asiointitili.wss.keystore.file}"
                                  type="jks" password="${viestintapalvelu.asiointitili.wss.keystore.password}" />
                </sec:keyManagers>
                <sec:certAlias>${viestintapalvelu.asiointitili.wss.keystore.alias}</sec:certAlias>
            </http:tlsClientParameters>
        </http:conduit>

        <bean class="fi.vm.sade.viestintapalvelu.feature.CustomJsonProvider" id="customJsonProvider"/>

        <camelContext xmlns="http://camel.apache.org/schema/spring">
            <contextScan/>
        </camelContext>

        <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

        <!-- Recovery scheduling -->
        <bean id="recoveryHandler" class="fi.vm.sade.viestintapalvelu.recovery.ServiceRecoveryHandler" />
        <task:scheduled-tasks>
          <task:scheduled ref="recoveryHandler" method="recover" fixed-rate="${viestintapalvelu.recovery.fixed.rate:3600000}" initial-delay="${viestintapalvelu.recovery.initial.delay:5000}"/>
        </task:scheduled-tasks>

        <!-- enable spring annotation driven transactions -->
        <tx:annotation-driven transaction-manager="transactionManager" />

        <!-- Swagger configuration -->
        <bean id="swaggerConfig" class="com.wordnik.swagger.jaxrs.config.BeanConfig">
            <property name="resourcePackage" value="fi.vm.sade.viestintapalvelu"/>
            <property name="version" value="1.0"/>
            <property name="basePath" value="${viestintapalvelu.swagger.base.bath:/viestintapalvelu}/api/v1"/>

            <property name="title" value="Swagger API documentation"/>
            <property name="scan" value="true"/>
        </bean>

        <!-- Add EntityManagerFactory (required by JTA) support -->
        <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="flyway">
            <property name="loadTimeWeaver">
                <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
            </property>
            <property name="dataSource" ref="dbDataSource"/>
            <property name="jpaPropertyMap">
                <map>
                    <entry key="hibernate.hbm2ddl.auto" value="${jpa.schemaUpdate}" />
                    <entry key="hibernate.show_sql" value="${jpa.showSql}" />
                </map>
            </property>
        </bean>

        <!-- transaction manager -->
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
            <property name="entityManagerFactory" ref="emf" />
        </bean>

        <bean id="swaggerResourceJSON" class="com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON"/>

        <!-- Swagger writers -->
        <bean id="resourceWriter" class="com.wordnik.swagger.jaxrs.listing.ResourceListingProvider" scope="singleton"/>
        <bean id="apiWriter" class="com.wordnik.swagger.jaxrs.listing.ApiDeclarationProvider" scope="singleton"/>

        <bean id="jsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />

        <bean id="mapper" class="fi.vm.sade.viestintapalvelu.feature.mapper.Mapper"/>
        <bean id="pagingAndSortingDTOConverter" class="fi.vm.sade.converter.PagingAndSortingDTOConverter"/>
        <bean id="jackson-feature" class="fi.vm.sade.viestintapalvelu.common.feature.JacksonFeature"/>

        <bean id="pdfPrinterResource" class="fi.vm.sade.viestintapalvelu.pdfprint.PDFPrinterResource"/>

        <jaxrs:server id="viestintapalveluResources">
            <jaxrs:serviceBeans>
                <ref bean="AddressLabelResource"/>
                <ref bean="AsiointitiliResource"/>
                <ref bean="AttachmentResourceImpl"/>
                <ref bean="DownloadResource"/>
                <ref bean="LetterResourceTrusted"/>
                <ref bean="IPostiResource"/>
                <ref bean="KoekutsukirjeResource"/>
                <ref bean="LetterReportResource"/>
                <ref bean="LetterResource"/>
                <ref bean="PreviewDataResource"/>
                <ref bean="MessageDataResource"/>
                <ref bean="MessageResource"/>
                <ref bean="OptionsResource"/>
                <ref bean="OrganizationResource"/>
                <ref bean="PersonResource"/>
                <ref bean="StructureResource"/>
                <ref bean="TemplateResource"/>
                <ref bean="swaggerResourceJSON"/>
                <ref bean="PDFPrinterResource"/>
            </jaxrs:serviceBeans>
            <jaxrs:providers>
                <ref bean="jackson-feature"/>
                <ref bean="resourceWriter" />
                <ref bean="apiWriter" />
            </jaxrs:providers>
        </jaxrs:server>
    </beans>
</beans>
